-- KOMPLETT RLS-OPTIMERING FÃ–R monthly_marketing_spend TABELLEN
-- Implementerar alla optimeringar enligt analys i en enda migration
-- 
-- FÃ–RBÃ„TTRINGAR:
-- 1. Skapar wrapper-funktion fÃ¶r att undvika upprepade auth.jwt() anrop
-- 2. Optimerar alla policies (SELECT, INSERT, UPDATE, DELETE)
-- 3. FÃ¶rbÃ¤ttrar prestanda genom STABLE function caching
--
-- SÃ„KERHET: Alla policies begrÃ¤nsar access till enbart admin-anvÃ¤ndare

BEGIN;

-- =============================================================================
-- STEG 1: SKAPA OPTIMERAD AUTH WRAPPER-FUNKTION
-- =============================================================================

-- Ta bort befintlig funktion om den finns
DROP FUNCTION IF EXISTS current_user_role();

-- Skapa ny optimerad auth wrapper-funktion
CREATE OR REPLACE FUNCTION current_user_role()
RETURNS TEXT AS $$
BEGIN
    -- AnvÃ¤nd STABLE fÃ¶r att lÃ¥ta PostgreSQL cache:a resultatet inom samma transaktion
    -- SECURITY DEFINER gÃ¶r att funktionen kÃ¶rs med skaparens rÃ¤ttigheter
    RETURN (auth.jwt() ->> 'user_role');
END;
$$ LANGUAGE plpgsql STABLE SECURITY DEFINER;

-- Ge behÃ¶righeter till funktionen
GRANT EXECUTE ON FUNCTION current_user_role() TO authenticated;
GRANT EXECUTE ON FUNCTION current_user_role() TO anon;

-- =============================================================================
-- STEG 2: OPTIMERA ALLA RLS POLICIES
-- =============================================================================

-- Kontrollera att RLS Ã¤r aktiverat (borde redan vara det)
ALTER TABLE monthly_marketing_spend ENABLE ROW LEVEL SECURITY;

-- OPTIMERA SELECT POLICY
DROP POLICY IF EXISTS "Enable read access for authenticated users" ON monthly_marketing_spend;
CREATE POLICY "Enable read access for authenticated users" ON monthly_marketing_spend
    FOR SELECT
    USING (current_user_role() = 'admin');

-- OPTIMERA INSERT POLICY  
DROP POLICY IF EXISTS "Enable insert for admin users" ON monthly_marketing_spend;
CREATE POLICY "Enable insert for admin users" ON monthly_marketing_spend
    FOR INSERT
    WITH CHECK (current_user_role() = 'admin');

-- OPTIMERA UPDATE POLICY
DROP POLICY IF EXISTS "Enable update for admin users" ON monthly_marketing_spend;
CREATE POLICY "Enable update for admin users" ON monthly_marketing_spend
    FOR UPDATE
    USING (current_user_role() = 'admin')
    WITH CHECK (current_user_role() = 'admin');

-- OPTIMERA DELETE POLICY
DROP POLICY IF EXISTS "Enable delete for admin users" ON monthly_marketing_spend;
CREATE POLICY "Enable delete for admin users" ON monthly_marketing_spend
    FOR DELETE
    USING (current_user_role() = 'admin');

-- =============================================================================
-- STEG 3: VALIDERING OCH DIAGNOSTIK
-- =============================================================================

-- Visa slutresultat av optimering
DO $$
BEGIN
    RAISE NOTICE '=== MONTHLY_MARKETING_SPEND RLS OPTIMERING SLUTFÃ–RD ===';
    RAISE NOTICE '';
    RAISE NOTICE 'FÃ–RBÃ„TTRINGAR IMPLEMENTERADE:';
    RAISE NOTICE 'âœ… Wrapper-funktion current_user_role() skapad fÃ¶r bÃ¤ttre prestanda';
    RAISE NOTICE 'âœ… SELECT policy optimerad - anvÃ¤nder wrapper-funktion';
    RAISE NOTICE 'âœ… INSERT policy optimerad - anvÃ¤nder wrapper-funktion';
    RAISE NOTICE 'âœ… UPDATE policy optimerad - anvÃ¤nder wrapper-funktion';
    RAISE NOTICE 'âœ… DELETE policy optimerad - anvÃ¤nder wrapper-funktion';
    RAISE NOTICE '';
    RAISE NOTICE 'SÃ„KERHETSINFO:';
    RAISE NOTICE 'ðŸ”’ Alla policies begrÃ¤nsar access till enbart admin-anvÃ¤ndare';
    RAISE NOTICE 'ðŸ”’ RLS Ã¤r aktiverat fÃ¶r tabellen';
    RAISE NOTICE '';
    RAISE NOTICE 'PRESTANDA:';
    RAISE NOTICE 'âš¡ Wrapper-funktionen cache:as inom samma transaktion';
    RAISE NOTICE 'âš¡ Undviker upprepade auth.jwt() anrop';
    RAISE NOTICE 'âš¡ FÃ¶rbÃ¤ttrad query-prestanda fÃ¶r policies';
    RAISE NOTICE '';
    RAISE NOTICE 'NÃ„STA STEG: Testa funktionaliteten med admin-anvÃ¤ndare';
END $$;

COMMIT;