// api/delete-technician.ts - Ta bort tekniker/admin permanent
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.VITE_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY! // Service role key

// Server-side supabase client med service role
const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

export default async function handler(req: any, res: any) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { technician_id } = req.body
    
    console.log('üóëÔ∏è Deleting technician:', technician_id)

    if (!technician_id) {
      return res.status(400).json({ error: 'technician_id kr√§vs' })
    }

    // 1. H√§mta tekniker-information f√∂rst
    const { data: technician, error: techError } = await supabaseAdmin
      .from('technicians')
      .select('name, email, role')
      .eq('id', technician_id)
      .single()

    if (techError || !technician) {
      console.error('Tekniker hittades inte:', techError)
      return res.status(404).json({ error: 'Tekniker hittades inte' })
    }

    console.log('üìã Technician to delete:', { 
      name: technician.name, 
      email: technician.email, 
      role: technician.role 
    })

    // 2. Hitta kopplad profil - olika logik f√∂r admins vs tekniker
    let profileQuery
    if (technician.role === 'Admin') {
      // F√∂r admins: s√∂k p√• email (de har inte technician_id i profiles)
      profileQuery = supabaseAdmin
        .from('profiles')
        .select('user_id')
        .eq('email', technician.email)
        .single()
    } else {
      // F√∂r tekniker: s√∂k p√• technician_id
      profileQuery = supabaseAdmin
        .from('profiles')
        .select('user_id')
        .eq('technician_id', technician_id)
        .single()
    }

    const { data: profile, error: profileError } = await profileQuery

    if (profile) {
      console.log('üë§ Found profile, deleting user_id:', profile.user_id)

      // 3. Ta bort fr√•n profiles-tabellen f√∂rst
      if (technician.role === 'Admin') {
        await supabaseAdmin.from('profiles').delete().eq('email', technician.email)
      } else {
        await supabaseAdmin.from('profiles').delete().eq('technician_id', technician_id)
      }
      console.log('‚úÖ Profile deleted from database')

      // 4. Ta bort fr√•n auth.users med service role
      const { error: authError } = await supabaseAdmin.auth.admin.deleteUser(profile.user_id)
      if (authError) {
        console.error('‚ùå Failed to delete auth user:', authError)
        throw new Error(`Kunde inte ta bort auth-anv√§ndare: ${authError.message}`)
      }
      console.log('‚úÖ Auth user deleted')
    } else {
      console.log('‚ÑπÔ∏è No profile found, skipping auth deletion')
    }

    // 5. Ta bort fr√•n technicians-tabellen sist
    const { error: deleteError } = await supabaseAdmin
      .from('technicians')
      .delete()
      .eq('id', technician_id)

    if (deleteError) {
      console.error('‚ùå Failed to delete technician:', deleteError)
      throw new Error(`Kunde inte ta bort fr√•n technicians-tabellen: ${deleteError.message}`)
    }

    console.log('‚úÖ Technician deleted from database')
    console.log('üéâ Complete deletion successful for:', technician.name)

    return res.status(200).json({
      success: true,
      message: `${technician.name} har tagits bort permanent`,
      deleted: {
        technician: true,
        profile: !!profile,
        authUser: !!profile
      }
    })

  } catch (error: any) {
    console.error('‚ùå Error in delete-technician:', error)
    return res.status(500).json({ 
      error: error.message || 'Ett fel uppstod vid borttagning',
      details: process.env.NODE_ENV === 'development' ? error.stack : undefined
    })
  }
}