// api/test-oneflow.ts - AVANCERAD VERSION F√ñR ATT MAPPA KONTOT
import type { VercelRequest, VercelResponse } from '@vercel/node';

// --- HJ√ÑLPAR-FUNKTION F√ñR API-ANROP ---
// Vi skapar en central funktion f√∂r att g√∂ra koden renare
async function oneflowFetch(endpoint: string, token: string) {
    const API_URL = process.env.ONEFLOW_API_URL || 'https://api.oneflow.com/v1';
    
    console.log(`...anropar Oneflow endpoint: ${endpoint}`);
    const response = await fetch(`${API_URL}${endpoint}`, {
        headers: {
            'x-oneflow-api-token': token,
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
    });

    if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå Fel fr√•n Oneflow API: ${response.status} - ${errorText}`);
        throw new Error(`Oneflow API Error: ${response.status}`);
    }
    
    console.log(`‚úÖ Svar mottaget fr√•n ${endpoint}`);
    return response.json();
}

// --- HUVUDFUNKTION (HANDLER) ---
export default async function handler(req: VercelRequest, res: VercelResponse) {
    // S√§tt CORS-headers
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    if (req.method === 'OPTIONS') {
        return res.status(204).end();
    }

    try {
        const ONEFLOW_API_TOKEN = process.env.ONEFLOW_API_TOKEN;
        if (!ONEFLOW_API_TOKEN) {
            throw new Error('Milj√∂variabeln ONEFLOW_API_TOKEN √§r inte satt.');
        }

        // H√§mta query-parametrar fr√•n URL:en
        const { listTemplates, templateId, contractId } = req.query;

        // V√§lj vad vi ska g√∂ra baserat p√• URL:en
        if (listTemplates) {
            // --- L√ÑGE 1: Lista alla avtalsmallar ---
            console.log('üß™ Diagnosl√§ge: Listar alla avtalsmallar...');
            const data = await oneflowFetch('/templates', ONEFLOW_API_TOKEN);
            
            // Plocka ut bara den viktigaste informationen
            const templates = data.data.map((t: any) => ({
                id: t.id,
                name: t.name,
                type: t.type?.name || 'Ok√§nd typ'
            }));

            return res.status(200).json({
                success: true,
                message: `Hittade ${templates.length} avtalsmallar.`,
                templates: templates
            });

        } else if (templateId) {
            // --- L√ÑGE 2: Visa detaljer f√∂r en specifik mall ---
            console.log(`üß™ Diagnosl√§ge: Visar detaljer f√∂r mall-ID ${templateId}...`);
            const data = await oneflowFetch(`/templates/${templateId}`, ONEFLOW_API_TOKEN);
            
            // Plocka ut dataf√§lten fr√•n mallen
            const dataFields = data.data_fields?.map((df: any) => ({
                id: df.id,
                key: df.key, // Detta √§r namnet du anv√§nder i koden
                type: df.type,
                default_value: df.default_value
            })) || [];

            return res.status(200).json({
                success: true,
                message: `Detaljer f√∂r mallen "${data.name}".`,
                template: { id: data.id, name: data.name },
                required_data_fields: dataFields
            });

        } else if (contractId) {
            // --- L√ÑGE 3: Visa detaljer f√∂r ett specifikt kontrakt ---
             console.log(`üß™ Diagnosl√§ge: Visar detaljer f√∂r kontrakt-ID ${contractId}...`);
            const data = await oneflowFetch(`/contracts/${contractId}`, ONEFLOW_API_TOKEN);

            const dataFields = data.data_fields?.map((df: any) => ({
                key: df.key,
                value: df.value // H√§r ser vi det ifyllda v√§rdet
            })) || [];

            return res.status(200).json({
                success: true,
                message: `Detaljer f√∂r kontraktet "${data.name}".`,
                contract: { id: data.id, name: data.name, state: data.state },
                filled_in_data_fields: dataFields
            });

        } else {
            // --- GRUNDL√ÑGE: Standard anslutningstest ---
            console.log('üß™ Diagnosl√§ge: Grundl√§ggande anslutningstest...');
            const data = await oneflowFetch('/contracts?limit=1', ONEFLOW_API_TOKEN);
            return res.status(200).json({
                success: true,
                message: 'Grundl√§ggande anslutning till Oneflow API fungerar!',
                data: {
                    total_contracts_in_account: data.meta?.total || 0
                }
            });
        }

    } catch (error) {
        console.error('‚ùå Ett fel intr√§ffade i test-scriptet:', error);
        return res.status(500).json({
            success: false,
            error: error instanceof Error ? error.message : 'Ok√§nt fel'
        });
    }
}